////  basicFunction.hpp//  SqList////  Created by ringggr on 17/6/1.//  Copyright © 2017年 Jacky(HJQ). All rights reserved.//#ifndef basicFunction_hpp#define basicFunction_hpp#include <stdio.h>#include <iostream>using namespace std;#define MaxSize 50//静态分配内存typedef struct{    int data[MaxSize];    int length = 0;}SqList;#define InitSize 100//动态分配内存typedef struct{    int *data;    int cap, length = 0;}SeqList;//C-------L.data = (ElemType *)malloc(sizeof(ElemType) * InitSize);//C++-----L.data = new ElemType[initType];void Reverse(int a[], int left, int right);//关于静态void ListInsert(SqList &L, int i, int e);bool ListDelete(SqList &L, int i, int &e);int LocateElem(SqList &L, int e);void Print(SqList &L);//关于动态void SeqCreate(SeqList &L);void SeqDestroy(SeqList &L);void SeqInsert(SeqList &L, int i, int e);int SeqPosReturn(SeqList &L, int pos);void SeqAdd(SeqList &L, int e);void SeqRemove(SeqList &L, int i, int &e);void SeqClear(SeqList &L);void SeqInput(SeqList &L);void SeqOutput(SeqList &L);void SeqResize(SeqList &L, int newSize);void SeqReverse(SeqList &L, int left, int right);//逆置void insertSort(SqList &L);bool quest1(SqList &L, int &e);//找出最小值void quest2(SqList &L);//逆置void quest3(SqList &L, int e);//删除所有值为e的void quest4(SqList &L, int s, int t);//顺序下 删除在s、t之间的值void quest5(SqList &L, int s, int t);//无序下 删除在s、t之间的值void quest6(SqList &L);//delete sameSeqList quest7(SeqList &L, SeqList &M);//合并两有序表void quest8(int a[], int m, int n);//将一个数组的前后两个线性表（前面的m个， 后面的n个）交换位置void quest9(SeqList &L, int e);//在升序数组a中查找e元素，存在则与最后元素交换，不存在则插入至正确位置void quest10(int a[], int n, int p);//数组循环左移p位int quest11(int a[], int b[], int n);//求两个长度相等的数组的中位数   时间复杂度O(n)int quest11_2(int a[], int b[], int n);//时间复杂度O(log2n)int quest12(int a[], int n);//求主元素（该数组最大值小于元素个数，某元素个数大于元素总数的一般叫主元素）#endif /* basicFunction_hpp */